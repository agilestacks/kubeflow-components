---
installCRDs: false

global:
  rbac:
    create: true
  leaderElection:
    namespace: "${component.certmanager.namespace}"

replicaCount: 1
image:
  repository: quay.io/jetstack/cert-manager-controller
  pullPolicy: IfNotPresent

clusterResourceNamespace: ""

ingressShim:
  defaultIssuerName: "${component.certmanager.clusterIssuer}"
  defaultIssuerKind: "ClusterIssuer"
  defaultIssuerGroup: "cert-manager.io"

serviceAccount:
  create: true
  automountServiceAccountToken: true

# Optional additional arguments
extraArgs: []
  # Use this flag to set a namespace that cert-manager will use to store
  # supporting resources required for each ClusterIssuer (default is kube-system)
  # - --cluster-resource-namespace=kube-system
  # When this flag is enabled, secrets will be automatically removed when the certificate resource is deleted
  # - --enable-certificate-owner-ref=true
  # Use this flag to enabled or disable arbitrary controllers, for example, disable the CertificiateRequests approver
  # - --controllers=*,-certificaterequests-approver

extraEnv: []
# - name: SOME_VAR
#   value: 'some value'

prometheus:
  enabled: false

webhook:
  replicaCount: 1
  timeoutSeconds: 10
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1

  image:
    repository: quay.io/jetstack/cert-manager-webhook
    pullPolicy: IfNotPresent

  serviceAccount:
    create: true
    automountServiceAccountToken: true
  securePort: 10250
  hostNetwork: false

cainjector:
  enabled: true
  replicaCount: 1
  image:
    repository: quay.io/jetstack/cert-manager-cainjector
    pullPolicy: IfNotPresent

  serviceAccount:
    create: true
    automountServiceAccountToken: true
